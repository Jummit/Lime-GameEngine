function sprite(image, hasAnimation, x, y)
  if not x then x=1 end
  if not y then y=1 end
  if type(image) == "string" then
    if paintutils.loadImage(image) then
      local image = paintutils.loadImage(image)
    else
      error("image does not exist")
    end
  else
    local newImages = {}
    for i=1, #image do
      newImages[i] = paintutils.loadImage(image[i])
    end
    image = newImages
  end

  if hasAnimation then frame=1 end
  return {
    x=x, y=y, image=image, hasAnimation=hasAnimation, frame=frame,
    draw = function(self, x, y)
      if not x then x = self.x end
      if not y then y = self.y end
      if self.hasAnimation then
        if #self.image == 0 then
          error("no images for the animation")
        end
        paintutils.drawImage(self.image[self.frame], x, y)
      else
        if self.image~=nil then
          error("no images to draw")
        end
        paintutils.drawImage(self.image, x, y)
      end
    end,
    set_pos = function(self, x, y)
      if not x or not y then error("x or y not declared") end
      self.x = x
      self.y = y
    end,
    next_frame = function(self)
      if self.hasAnimation then
        if self.frame==#self.image then
          self.frame = 1
        else
          self.frame = self.frame+1
        end
      end
    end,
    update = function(self, func)
      self:draw()
      self:next_frame()
      if func then
        func(self)
      end
    end
  }
end

function tile(sprite)
  return {
    sprite=sprite
  }
end

function tileset(tiles, width, height)
  for name, tile in pairs(tiles) do
    if not name then error("tile in tileset needs key") end
  end
  return {
    tiles=tiles, width=width, height=height
  }
end

function tilemap(tileset, tilemap, entitys)
  return {
    tileset=tileset, tilemap=tilemap, entitys=entitys,
    get_tile = function(self, x, y)
      if not x or not y then error("needed x and y for getting tile") end
      return self.tileset[self.tilemap[y][x]]
    end,
    set_tile = function(self, x, y, tilename)
      if not tileset[tilename] then error("tile in tileset with this name not exist") end
      self.tilemap[y][x] = tilename
    end,
    draw = function(self, draw_x, draw_y)
      if not draw_x or not draw_y then error("x anchor and y anchor are required to draw map") end
      for y = 1, #self.tilemap do
        for x = 1, #self.tilemap[y] do
          self.tileset.tiles[self.tilemap[y][x]].sprite:draw(
            y*self.tileset.height+draw_y-self.tileset.height,
            x*self.tileset.width+draw_x-self.tileset.width
          )
        end
      end
    end,
    update = function(self)
      for name, tile in pairs(self.tileset.tiles) do
        tile.sprite:next_frame()
      end
    end
  }
end

function achievement(title, description, is_completed_function, tier, x, y, requirements, is_start)
  return {
    title=title, description=descripion, is_completed_function=is_completed_functio, tier=tier, x=x, y=y, requirements=requirements, is_completed=false, is_start=is_start
  }
end

function achievements(achievements, tier_sprites, completed_tier_sprites, line_color)
  local sprites = {}
  local comp_sprites = {}
  for tier, image in pairs(tier_sprites) do
    sprites[tier] = paintutils.loadImage(image)
  end
  for tier, image in pairs(completed_tier_sprites) do
    comp_sprites[tier] = paintutils.loadImage(image)
  end

  tier_sprites = sprites
  completed_tier_sprites = comp_sprites

  return {
    achievements=achievements, tier_sprites=tier_sprites, completed_tier_sprites=completed_tier_sprites, line_color=line_color,
    draw = function(self)
      for _, achievement in pairs(self.achievements) do
        if not achievement.is_start then
          for _, requ_achi in pairs(self.achievements) do
            if requ_achi.title == achievement.requirements then
              paintutils.drawLine(achievement.x, achievement.y, requ_achi.x, requ_achi.y, colors[self.line_color])
            end
          end
        end
      end
      for _, achievement in pairs(self.achievements) do
        local sprite
        if achievement.is_completed then
          sprite = self.completed_tier_sprites[achievement.tier]
        else
          sprite = self.tier_sprites[achievement.tier]
        end
        paintutils.drawImage(sprite, achievement.x, achievement.y)
      end
    end,
    update = function(self)
    end
  }
end

function inventory()
end
